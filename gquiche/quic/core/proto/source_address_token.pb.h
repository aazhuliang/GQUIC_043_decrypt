// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: source_address_token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_source_5faddress_5ftoken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_source_5faddress_5ftoken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "cached_network_parameters.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_source_5faddress_5ftoken_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_source_5faddress_5ftoken_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace quic {
class SourceAddressToken;
class SourceAddressTokenDefaultTypeInternal;
extern SourceAddressTokenDefaultTypeInternal _SourceAddressToken_default_instance_;
class SourceAddressTokens;
class SourceAddressTokensDefaultTypeInternal;
extern SourceAddressTokensDefaultTypeInternal _SourceAddressTokens_default_instance_;
}  // namespace quic
PROTOBUF_NAMESPACE_OPEN
template<> ::quic::SourceAddressToken* Arena::CreateMaybeMessage<::quic::SourceAddressToken>(Arena*);
template<> ::quic::SourceAddressTokens* Arena::CreateMaybeMessage<::quic::SourceAddressTokens>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace quic {

// ===================================================================

class SourceAddressToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.SourceAddressToken) */ {
 public:
  inline SourceAddressToken() : SourceAddressToken(nullptr) {};
  virtual ~SourceAddressToken();

  SourceAddressToken(const SourceAddressToken& from);
  SourceAddressToken(SourceAddressToken&& from) noexcept
    : SourceAddressToken() {
    *this = ::std::move(from);
  }

  inline SourceAddressToken& operator=(const SourceAddressToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceAddressToken& operator=(SourceAddressToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SourceAddressToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceAddressToken* internal_default_instance() {
    return reinterpret_cast<const SourceAddressToken*>(
               &_SourceAddressToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SourceAddressToken& a, SourceAddressToken& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceAddressToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceAddressToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceAddressToken* New() const final {
    return CreateMaybeMessage<SourceAddressToken>(nullptr);
  }

  SourceAddressToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceAddressToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SourceAddressToken& from);
  void MergeFrom(const SourceAddressToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SourceAddressToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quic.SourceAddressToken";
  }
  protected:
  explicit SourceAddressToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kCachedNetworkParametersFieldNumber = 3,
    kTimestampFieldNumber = 2,
  };
  // required bytes ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional .quic.CachedNetworkParameters cached_network_parameters = 3;
  bool has_cached_network_parameters() const;
  private:
  bool _internal_has_cached_network_parameters() const;
  public:
  void clear_cached_network_parameters();
  const ::quic::CachedNetworkParameters& cached_network_parameters() const;
  ::quic::CachedNetworkParameters* release_cached_network_parameters();
  ::quic::CachedNetworkParameters* mutable_cached_network_parameters();
  void set_allocated_cached_network_parameters(::quic::CachedNetworkParameters* cached_network_parameters);
  private:
  const ::quic::CachedNetworkParameters& _internal_cached_network_parameters() const;
  ::quic::CachedNetworkParameters* _internal_mutable_cached_network_parameters();
  public:
  void unsafe_arena_set_allocated_cached_network_parameters(
      ::quic::CachedNetworkParameters* cached_network_parameters);
  ::quic::CachedNetworkParameters* unsafe_arena_release_cached_network_parameters();

  // required int64 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:quic.SourceAddressToken)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::quic::CachedNetworkParameters* cached_network_parameters_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_source_5faddress_5ftoken_2eproto;
};
// -------------------------------------------------------------------

class SourceAddressTokens PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.SourceAddressTokens) */ {
 public:
  inline SourceAddressTokens() : SourceAddressTokens(nullptr) {};
  virtual ~SourceAddressTokens();

  SourceAddressTokens(const SourceAddressTokens& from);
  SourceAddressTokens(SourceAddressTokens&& from) noexcept
    : SourceAddressTokens() {
    *this = ::std::move(from);
  }

  inline SourceAddressTokens& operator=(const SourceAddressTokens& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceAddressTokens& operator=(SourceAddressTokens&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SourceAddressTokens& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceAddressTokens* internal_default_instance() {
    return reinterpret_cast<const SourceAddressTokens*>(
               &_SourceAddressTokens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SourceAddressTokens& a, SourceAddressTokens& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceAddressTokens* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceAddressTokens* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceAddressTokens* New() const final {
    return CreateMaybeMessage<SourceAddressTokens>(nullptr);
  }

  SourceAddressTokens* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceAddressTokens>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SourceAddressTokens& from);
  void MergeFrom(const SourceAddressTokens& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SourceAddressTokens* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quic.SourceAddressTokens";
  }
  protected:
  explicit SourceAddressTokens(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 4,
  };
  // repeated .quic.SourceAddressToken tokens = 4;
  int tokens_size() const;
  private:
  int _internal_tokens_size() const;
  public:
  void clear_tokens();
  ::quic::SourceAddressToken* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken >*
      mutable_tokens();
  private:
  const ::quic::SourceAddressToken& _internal_tokens(int index) const;
  ::quic::SourceAddressToken* _internal_add_tokens();
  public:
  const ::quic::SourceAddressToken& tokens(int index) const;
  ::quic::SourceAddressToken* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken >&
      tokens() const;

  // @@protoc_insertion_point(class_scope:quic.SourceAddressTokens)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken > tokens_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_source_5faddress_5ftoken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SourceAddressToken

// required bytes ip = 1;
inline bool SourceAddressToken::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SourceAddressToken::has_ip() const {
  return _internal_has_ip();
}
inline void SourceAddressToken::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SourceAddressToken::ip() const {
  // @@protoc_insertion_point(field_get:quic.SourceAddressToken.ip)
  return _internal_ip();
}
inline void SourceAddressToken::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:quic.SourceAddressToken.ip)
}
inline std::string* SourceAddressToken::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:quic.SourceAddressToken.ip)
  return _internal_mutable_ip();
}
inline const std::string& SourceAddressToken::_internal_ip() const {
  return ip_.Get();
}
inline void SourceAddressToken::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceAddressToken::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:quic.SourceAddressToken.ip)
}
inline void SourceAddressToken::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:quic.SourceAddressToken.ip)
}
inline void SourceAddressToken::set_ip(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:quic.SourceAddressToken.ip)
}
inline std::string* SourceAddressToken::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceAddressToken::release_ip() {
  // @@protoc_insertion_point(field_release:quic.SourceAddressToken.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceAddressToken::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:quic.SourceAddressToken.ip)
}
inline std::string* SourceAddressToken::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:quic.SourceAddressToken.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceAddressToken::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:quic.SourceAddressToken.ip)
}

// required int64 timestamp = 2;
inline bool SourceAddressToken::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SourceAddressToken::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void SourceAddressToken::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SourceAddressToken::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SourceAddressToken::timestamp() const {
  // @@protoc_insertion_point(field_get:quic.SourceAddressToken.timestamp)
  return _internal_timestamp();
}
inline void SourceAddressToken::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void SourceAddressToken::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:quic.SourceAddressToken.timestamp)
}

// optional .quic.CachedNetworkParameters cached_network_parameters = 3;
inline bool SourceAddressToken::_internal_has_cached_network_parameters() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || cached_network_parameters_ != nullptr);
  return value;
}
inline bool SourceAddressToken::has_cached_network_parameters() const {
  return _internal_has_cached_network_parameters();
}
inline const ::quic::CachedNetworkParameters& SourceAddressToken::_internal_cached_network_parameters() const {
  const ::quic::CachedNetworkParameters* p = cached_network_parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::quic::CachedNetworkParameters*>(
      &::quic::_CachedNetworkParameters_default_instance_);
}
inline const ::quic::CachedNetworkParameters& SourceAddressToken::cached_network_parameters() const {
  // @@protoc_insertion_point(field_get:quic.SourceAddressToken.cached_network_parameters)
  return _internal_cached_network_parameters();
}
inline void SourceAddressToken::unsafe_arena_set_allocated_cached_network_parameters(
    ::quic::CachedNetworkParameters* cached_network_parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cached_network_parameters_);
  }
  cached_network_parameters_ = cached_network_parameters;
  if (cached_network_parameters) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:quic.SourceAddressToken.cached_network_parameters)
}
inline ::quic::CachedNetworkParameters* SourceAddressToken::release_cached_network_parameters() {
  auto temp = unsafe_arena_release_cached_network_parameters();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::quic::CachedNetworkParameters* SourceAddressToken::unsafe_arena_release_cached_network_parameters() {
  // @@protoc_insertion_point(field_release:quic.SourceAddressToken.cached_network_parameters)
  _has_bits_[0] &= ~0x00000002u;
  ::quic::CachedNetworkParameters* temp = cached_network_parameters_;
  cached_network_parameters_ = nullptr;
  return temp;
}
inline ::quic::CachedNetworkParameters* SourceAddressToken::_internal_mutable_cached_network_parameters() {
  _has_bits_[0] |= 0x00000002u;
  if (cached_network_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::quic::CachedNetworkParameters>(GetArena());
    cached_network_parameters_ = p;
  }
  return cached_network_parameters_;
}
inline ::quic::CachedNetworkParameters* SourceAddressToken::mutable_cached_network_parameters() {
  // @@protoc_insertion_point(field_mutable:quic.SourceAddressToken.cached_network_parameters)
  return _internal_mutable_cached_network_parameters();
}
inline void SourceAddressToken::set_allocated_cached_network_parameters(::quic::CachedNetworkParameters* cached_network_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cached_network_parameters_);
  }
  if (cached_network_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cached_network_parameters)->GetArena();
    if (message_arena != submessage_arena) {
      cached_network_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cached_network_parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cached_network_parameters_ = cached_network_parameters;
  // @@protoc_insertion_point(field_set_allocated:quic.SourceAddressToken.cached_network_parameters)
}

// -------------------------------------------------------------------

// SourceAddressTokens

// repeated .quic.SourceAddressToken tokens = 4;
inline int SourceAddressTokens::_internal_tokens_size() const {
  return tokens_.size();
}
inline int SourceAddressTokens::tokens_size() const {
  return _internal_tokens_size();
}
inline void SourceAddressTokens::clear_tokens() {
  tokens_.Clear();
}
inline ::quic::SourceAddressToken* SourceAddressTokens::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:quic.SourceAddressTokens.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken >*
SourceAddressTokens::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:quic.SourceAddressTokens.tokens)
  return &tokens_;
}
inline const ::quic::SourceAddressToken& SourceAddressTokens::_internal_tokens(int index) const {
  return tokens_.Get(index);
}
inline const ::quic::SourceAddressToken& SourceAddressTokens::tokens(int index) const {
  // @@protoc_insertion_point(field_get:quic.SourceAddressTokens.tokens)
  return _internal_tokens(index);
}
inline ::quic::SourceAddressToken* SourceAddressTokens::_internal_add_tokens() {
  return tokens_.Add();
}
inline ::quic::SourceAddressToken* SourceAddressTokens::add_tokens() {
  // @@protoc_insertion_point(field_add:quic.SourceAddressTokens.tokens)
  return _internal_add_tokens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::quic::SourceAddressToken >&
SourceAddressTokens::tokens() const {
  // @@protoc_insertion_point(field_list:quic.SourceAddressTokens.tokens)
  return tokens_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quic

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_source_5faddress_5ftoken_2eproto
