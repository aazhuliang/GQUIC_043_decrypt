// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cached_network_parameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cached_5fnetwork_5fparameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cached_5fnetwork_5fparameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cached_5fnetwork_5fparameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cached_5fnetwork_5fparameters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace quic {
class CachedNetworkParameters;
class CachedNetworkParametersDefaultTypeInternal;
extern CachedNetworkParametersDefaultTypeInternal _CachedNetworkParameters_default_instance_;
}  // namespace quic
PROTOBUF_NAMESPACE_OPEN
template<> ::quic::CachedNetworkParameters* Arena::CreateMaybeMessage<::quic::CachedNetworkParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace quic {

enum CachedNetworkParameters_PreviousConnectionState : int {
  CachedNetworkParameters_PreviousConnectionState_SLOW_START = 0,
  CachedNetworkParameters_PreviousConnectionState_CONGESTION_AVOIDANCE = 1
};
bool CachedNetworkParameters_PreviousConnectionState_IsValid(int value);
constexpr CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MIN = CachedNetworkParameters_PreviousConnectionState_SLOW_START;
constexpr CachedNetworkParameters_PreviousConnectionState CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MAX = CachedNetworkParameters_PreviousConnectionState_CONGESTION_AVOIDANCE;
constexpr int CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_ARRAYSIZE = CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MAX + 1;

const std::string& CachedNetworkParameters_PreviousConnectionState_Name(CachedNetworkParameters_PreviousConnectionState value);
template<typename T>
inline const std::string& CachedNetworkParameters_PreviousConnectionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CachedNetworkParameters_PreviousConnectionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CachedNetworkParameters_PreviousConnectionState_Name.");
  return CachedNetworkParameters_PreviousConnectionState_Name(static_cast<CachedNetworkParameters_PreviousConnectionState>(enum_t_value));
}
bool CachedNetworkParameters_PreviousConnectionState_Parse(
    const std::string& name, CachedNetworkParameters_PreviousConnectionState* value);
// ===================================================================

class CachedNetworkParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:quic.CachedNetworkParameters) */ {
 public:
  inline CachedNetworkParameters() : CachedNetworkParameters(nullptr) {};
  virtual ~CachedNetworkParameters();

  CachedNetworkParameters(const CachedNetworkParameters& from);
  CachedNetworkParameters(CachedNetworkParameters&& from) noexcept
    : CachedNetworkParameters() {
    *this = ::std::move(from);
  }

  inline CachedNetworkParameters& operator=(const CachedNetworkParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline CachedNetworkParameters& operator=(CachedNetworkParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CachedNetworkParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CachedNetworkParameters* internal_default_instance() {
    return reinterpret_cast<const CachedNetworkParameters*>(
               &_CachedNetworkParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CachedNetworkParameters& a, CachedNetworkParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(CachedNetworkParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CachedNetworkParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CachedNetworkParameters* New() const final {
    return CreateMaybeMessage<CachedNetworkParameters>(nullptr);
  }

  CachedNetworkParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CachedNetworkParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CachedNetworkParameters& from);
  void MergeFrom(const CachedNetworkParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CachedNetworkParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quic.CachedNetworkParameters";
  }
  protected:
  explicit CachedNetworkParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CachedNetworkParameters_PreviousConnectionState PreviousConnectionState;
  static constexpr PreviousConnectionState SLOW_START =
    CachedNetworkParameters_PreviousConnectionState_SLOW_START;
  static constexpr PreviousConnectionState CONGESTION_AVOIDANCE =
    CachedNetworkParameters_PreviousConnectionState_CONGESTION_AVOIDANCE;
  static inline bool PreviousConnectionState_IsValid(int value) {
    return CachedNetworkParameters_PreviousConnectionState_IsValid(value);
  }
  static constexpr PreviousConnectionState PreviousConnectionState_MIN =
    CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MIN;
  static constexpr PreviousConnectionState PreviousConnectionState_MAX =
    CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_MAX;
  static constexpr int PreviousConnectionState_ARRAYSIZE =
    CachedNetworkParameters_PreviousConnectionState_PreviousConnectionState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PreviousConnectionState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PreviousConnectionState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PreviousConnectionState_Name.");
    return CachedNetworkParameters_PreviousConnectionState_Name(enum_t_value);
  }
  static inline bool PreviousConnectionState_Parse(const std::string& name,
      PreviousConnectionState* value) {
    return CachedNetworkParameters_PreviousConnectionState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServingRegionFieldNumber = 1,
    kBandwidthEstimateBytesPerSecondFieldNumber = 2,
    kMinRttMsFieldNumber = 3,
    kPreviousConnectionStateFieldNumber = 4,
    kMaxBandwidthEstimateBytesPerSecondFieldNumber = 5,
    kMaxBandwidthTimestampSecondsFieldNumber = 6,
    kTimestampFieldNumber = 7,
  };
  // optional string serving_region = 1;
  bool has_serving_region() const;
  private:
  bool _internal_has_serving_region() const;
  public:
  void clear_serving_region();
  const std::string& serving_region() const;
  void set_serving_region(const std::string& value);
  void set_serving_region(std::string&& value);
  void set_serving_region(const char* value);
  void set_serving_region(const char* value, size_t size);
  std::string* mutable_serving_region();
  std::string* release_serving_region();
  void set_allocated_serving_region(std::string* serving_region);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serving_region();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serving_region(
      std::string* serving_region);
  private:
  const std::string& _internal_serving_region() const;
  void _internal_set_serving_region(const std::string& value);
  std::string* _internal_mutable_serving_region();
  public:

  // optional int32 bandwidth_estimate_bytes_per_second = 2;
  bool has_bandwidth_estimate_bytes_per_second() const;
  private:
  bool _internal_has_bandwidth_estimate_bytes_per_second() const;
  public:
  void clear_bandwidth_estimate_bytes_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 bandwidth_estimate_bytes_per_second() const;
  void set_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bandwidth_estimate_bytes_per_second() const;
  void _internal_set_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 min_rtt_ms = 3;
  bool has_min_rtt_ms() const;
  private:
  bool _internal_has_min_rtt_ms() const;
  public:
  void clear_min_rtt_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 min_rtt_ms() const;
  void set_min_rtt_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_rtt_ms() const;
  void _internal_set_min_rtt_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 previous_connection_state = 4;
  bool has_previous_connection_state() const;
  private:
  bool _internal_has_previous_connection_state() const;
  public:
  void clear_previous_connection_state();
  ::PROTOBUF_NAMESPACE_ID::int32 previous_connection_state() const;
  void set_previous_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_previous_connection_state() const;
  void _internal_set_previous_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 max_bandwidth_estimate_bytes_per_second = 5;
  bool has_max_bandwidth_estimate_bytes_per_second() const;
  private:
  bool _internal_has_max_bandwidth_estimate_bytes_per_second() const;
  public:
  void clear_max_bandwidth_estimate_bytes_per_second();
  ::PROTOBUF_NAMESPACE_ID::int32 max_bandwidth_estimate_bytes_per_second() const;
  void set_max_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_bandwidth_estimate_bytes_per_second() const;
  void _internal_set_max_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 max_bandwidth_timestamp_seconds = 6;
  bool has_max_bandwidth_timestamp_seconds() const;
  private:
  bool _internal_has_max_bandwidth_timestamp_seconds() const;
  public:
  void clear_max_bandwidth_timestamp_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 max_bandwidth_timestamp_seconds() const;
  void set_max_bandwidth_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_bandwidth_timestamp_seconds() const;
  void _internal_set_max_bandwidth_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 timestamp = 7;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:quic.CachedNetworkParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serving_region_;
  ::PROTOBUF_NAMESPACE_ID::int32 bandwidth_estimate_bytes_per_second_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_rtt_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 previous_connection_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_bandwidth_estimate_bytes_per_second_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_bandwidth_timestamp_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_cached_5fnetwork_5fparameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CachedNetworkParameters

// optional string serving_region = 1;
inline bool CachedNetworkParameters::_internal_has_serving_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CachedNetworkParameters::has_serving_region() const {
  return _internal_has_serving_region();
}
inline void CachedNetworkParameters::clear_serving_region() {
  serving_region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CachedNetworkParameters::serving_region() const {
  // @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.serving_region)
  return _internal_serving_region();
}
inline void CachedNetworkParameters::set_serving_region(const std::string& value) {
  _internal_set_serving_region(value);
  // @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.serving_region)
}
inline std::string* CachedNetworkParameters::mutable_serving_region() {
  // @@protoc_insertion_point(field_mutable:quic.CachedNetworkParameters.serving_region)
  return _internal_mutable_serving_region();
}
inline const std::string& CachedNetworkParameters::_internal_serving_region() const {
  return serving_region_.Get();
}
inline void CachedNetworkParameters::_internal_set_serving_region(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serving_region_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CachedNetworkParameters::set_serving_region(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serving_region_.SetLite(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:quic.CachedNetworkParameters.serving_region)
}
inline void CachedNetworkParameters::set_serving_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serving_region_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:quic.CachedNetworkParameters.serving_region)
}
inline void CachedNetworkParameters::set_serving_region(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serving_region_.SetLite(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:quic.CachedNetworkParameters.serving_region)
}
inline std::string* CachedNetworkParameters::_internal_mutable_serving_region() {
  _has_bits_[0] |= 0x00000001u;
  return serving_region_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CachedNetworkParameters::release_serving_region() {
  // @@protoc_insertion_point(field_release:quic.CachedNetworkParameters.serving_region)
  if (!_internal_has_serving_region()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serving_region_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CachedNetworkParameters::set_allocated_serving_region(std::string* serving_region) {
  if (serving_region != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serving_region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serving_region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:quic.CachedNetworkParameters.serving_region)
}
inline std::string* CachedNetworkParameters::unsafe_arena_release_serving_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:quic.CachedNetworkParameters.serving_region)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return serving_region_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CachedNetworkParameters::unsafe_arena_set_allocated_serving_region(
    std::string* serving_region) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serving_region != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serving_region_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serving_region, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:quic.CachedNetworkParameters.serving_region)
}

// optional int32 bandwidth_estimate_bytes_per_second = 2;
inline bool CachedNetworkParameters::_internal_has_bandwidth_estimate_bytes_per_second() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CachedNetworkParameters::has_bandwidth_estimate_bytes_per_second() const {
  return _internal_has_bandwidth_estimate_bytes_per_second();
}
inline void CachedNetworkParameters::clear_bandwidth_estimate_bytes_per_second() {
  bandwidth_estimate_bytes_per_second_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::_internal_bandwidth_estimate_bytes_per_second() const {
  return bandwidth_estimate_bytes_per_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::bandwidth_estimate_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.bandwidth_estimate_bytes_per_second)
  return _internal_bandwidth_estimate_bytes_per_second();
}
inline void CachedNetworkParameters::_internal_set_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  bandwidth_estimate_bytes_per_second_ = value;
}
inline void CachedNetworkParameters::set_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bandwidth_estimate_bytes_per_second(value);
  // @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.bandwidth_estimate_bytes_per_second)
}

// optional int32 max_bandwidth_estimate_bytes_per_second = 5;
inline bool CachedNetworkParameters::_internal_has_max_bandwidth_estimate_bytes_per_second() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CachedNetworkParameters::has_max_bandwidth_estimate_bytes_per_second() const {
  return _internal_has_max_bandwidth_estimate_bytes_per_second();
}
inline void CachedNetworkParameters::clear_max_bandwidth_estimate_bytes_per_second() {
  max_bandwidth_estimate_bytes_per_second_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::_internal_max_bandwidth_estimate_bytes_per_second() const {
  return max_bandwidth_estimate_bytes_per_second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::max_bandwidth_estimate_bytes_per_second() const {
  // @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.max_bandwidth_estimate_bytes_per_second)
  return _internal_max_bandwidth_estimate_bytes_per_second();
}
inline void CachedNetworkParameters::_internal_set_max_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_bandwidth_estimate_bytes_per_second_ = value;
}
inline void CachedNetworkParameters::set_max_bandwidth_estimate_bytes_per_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_bandwidth_estimate_bytes_per_second(value);
  // @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.max_bandwidth_estimate_bytes_per_second)
}

// optional int64 max_bandwidth_timestamp_seconds = 6;
inline bool CachedNetworkParameters::_internal_has_max_bandwidth_timestamp_seconds() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CachedNetworkParameters::has_max_bandwidth_timestamp_seconds() const {
  return _internal_has_max_bandwidth_timestamp_seconds();
}
inline void CachedNetworkParameters::clear_max_bandwidth_timestamp_seconds() {
  max_bandwidth_timestamp_seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachedNetworkParameters::_internal_max_bandwidth_timestamp_seconds() const {
  return max_bandwidth_timestamp_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachedNetworkParameters::max_bandwidth_timestamp_seconds() const {
  // @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.max_bandwidth_timestamp_seconds)
  return _internal_max_bandwidth_timestamp_seconds();
}
inline void CachedNetworkParameters::_internal_set_max_bandwidth_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  max_bandwidth_timestamp_seconds_ = value;
}
inline void CachedNetworkParameters::set_max_bandwidth_timestamp_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_bandwidth_timestamp_seconds(value);
  // @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.max_bandwidth_timestamp_seconds)
}

// optional int32 min_rtt_ms = 3;
inline bool CachedNetworkParameters::_internal_has_min_rtt_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CachedNetworkParameters::has_min_rtt_ms() const {
  return _internal_has_min_rtt_ms();
}
inline void CachedNetworkParameters::clear_min_rtt_ms() {
  min_rtt_ms_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::_internal_min_rtt_ms() const {
  return min_rtt_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::min_rtt_ms() const {
  // @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.min_rtt_ms)
  return _internal_min_rtt_ms();
}
inline void CachedNetworkParameters::_internal_set_min_rtt_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  min_rtt_ms_ = value;
}
inline void CachedNetworkParameters::set_min_rtt_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_rtt_ms(value);
  // @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.min_rtt_ms)
}

// optional int32 previous_connection_state = 4;
inline bool CachedNetworkParameters::_internal_has_previous_connection_state() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CachedNetworkParameters::has_previous_connection_state() const {
  return _internal_has_previous_connection_state();
}
inline void CachedNetworkParameters::clear_previous_connection_state() {
  previous_connection_state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::_internal_previous_connection_state() const {
  return previous_connection_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CachedNetworkParameters::previous_connection_state() const {
  // @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.previous_connection_state)
  return _internal_previous_connection_state();
}
inline void CachedNetworkParameters::_internal_set_previous_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  previous_connection_state_ = value;
}
inline void CachedNetworkParameters::set_previous_connection_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_previous_connection_state(value);
  // @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.previous_connection_state)
}

// optional int64 timestamp = 7;
inline bool CachedNetworkParameters::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CachedNetworkParameters::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CachedNetworkParameters::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachedNetworkParameters::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CachedNetworkParameters::timestamp() const {
  // @@protoc_insertion_point(field_get:quic.CachedNetworkParameters.timestamp)
  return _internal_timestamp();
}
inline void CachedNetworkParameters::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  timestamp_ = value;
}
inline void CachedNetworkParameters::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:quic.CachedNetworkParameters.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace quic

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::quic::CachedNetworkParameters_PreviousConnectionState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cached_5fnetwork_5fparameters_2eproto
